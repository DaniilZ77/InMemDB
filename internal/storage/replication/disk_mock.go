// Code generated by mockery v2.53.3. DO NOT EDIT.

package replication

import mock "github.com/stretchr/testify/mock"

// MockDisk is an autogenerated mock type for the Disk type
type MockDisk struct {
	mock.Mock
}

type MockDisk_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDisk) EXPECT() *MockDisk_Expecter {
	return &MockDisk_Expecter{mock: &_m.Mock}
}

// LastSegment provides a mock function with no fields
func (_m *MockDisk) LastSegment() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for LastSegment")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDisk_LastSegment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LastSegment'
type MockDisk_LastSegment_Call struct {
	*mock.Call
}

// LastSegment is a helper method to define mock.On call
func (_e *MockDisk_Expecter) LastSegment() *MockDisk_LastSegment_Call {
	return &MockDisk_LastSegment_Call{Call: _e.mock.On("LastSegment")}
}

func (_c *MockDisk_LastSegment_Call) Run(run func()) *MockDisk_LastSegment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDisk_LastSegment_Call) Return(_a0 string, _a1 error) *MockDisk_LastSegment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDisk_LastSegment_Call) RunAndReturn(run func() (string, error)) *MockDisk_LastSegment_Call {
	_c.Call.Return(run)
	return _c
}

// WriteFile provides a mock function with given fields: filename, data
func (_m *MockDisk) WriteFile(filename string, data []byte) error {
	ret := _m.Called(filename, data)

	if len(ret) == 0 {
		panic("no return value specified for WriteFile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []byte) error); ok {
		r0 = rf(filename, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDisk_WriteFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteFile'
type MockDisk_WriteFile_Call struct {
	*mock.Call
}

// WriteFile is a helper method to define mock.On call
//   - filename string
//   - data []byte
func (_e *MockDisk_Expecter) WriteFile(filename interface{}, data interface{}) *MockDisk_WriteFile_Call {
	return &MockDisk_WriteFile_Call{Call: _e.mock.On("WriteFile", filename, data)}
}

func (_c *MockDisk_WriteFile_Call) Run(run func(filename string, data []byte)) *MockDisk_WriteFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]byte))
	})
	return _c
}

func (_c *MockDisk_WriteFile_Call) Return(_a0 error) *MockDisk_WriteFile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDisk_WriteFile_Call) RunAndReturn(run func(string, []byte) error) *MockDisk_WriteFile_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDisk creates a new instance of MockDisk. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDisk(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDisk {
	mock := &MockDisk{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
