// Code generated by mockery v2.53.3. DO NOT EDIT.

package storage

import (
	wal "github.com/DaniilZ77/InMemDB/internal/storage/wal"
	mock "github.com/stretchr/testify/mock"
)

// MockReplication is an autogenerated mock type for the Replication type
type MockReplication struct {
	mock.Mock
}

type MockReplication_Expecter struct {
	mock *mock.Mock
}

func (_m *MockReplication) EXPECT() *MockReplication_Expecter {
	return &MockReplication_Expecter{mock: &_m.Mock}
}

// GetReplicationStream provides a mock function with no fields
func (_m *MockReplication) GetReplicationStream() <-chan []wal.Command {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetReplicationStream")
	}

	var r0 <-chan []wal.Command
	if rf, ok := ret.Get(0).(func() <-chan []wal.Command); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan []wal.Command)
		}
	}

	return r0
}

// MockReplication_GetReplicationStream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReplicationStream'
type MockReplication_GetReplicationStream_Call struct {
	*mock.Call
}

// GetReplicationStream is a helper method to define mock.On call
func (_e *MockReplication_Expecter) GetReplicationStream() *MockReplication_GetReplicationStream_Call {
	return &MockReplication_GetReplicationStream_Call{Call: _e.mock.On("GetReplicationStream")}
}

func (_c *MockReplication_GetReplicationStream_Call) Run(run func()) *MockReplication_GetReplicationStream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockReplication_GetReplicationStream_Call) Return(_a0 <-chan []wal.Command) *MockReplication_GetReplicationStream_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockReplication_GetReplicationStream_Call) RunAndReturn(run func() <-chan []wal.Command) *MockReplication_GetReplicationStream_Call {
	_c.Call.Return(run)
	return _c
}

// IsSlave provides a mock function with no fields
func (_m *MockReplication) IsSlave() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsSlave")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockReplication_IsSlave_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsSlave'
type MockReplication_IsSlave_Call struct {
	*mock.Call
}

// IsSlave is a helper method to define mock.On call
func (_e *MockReplication_Expecter) IsSlave() *MockReplication_IsSlave_Call {
	return &MockReplication_IsSlave_Call{Call: _e.mock.On("IsSlave")}
}

func (_c *MockReplication_IsSlave_Call) Run(run func()) *MockReplication_IsSlave_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockReplication_IsSlave_Call) Return(_a0 bool) *MockReplication_IsSlave_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockReplication_IsSlave_Call) RunAndReturn(run func() bool) *MockReplication_IsSlave_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockReplication creates a new instance of MockReplication. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockReplication(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockReplication {
	mock := &MockReplication{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
