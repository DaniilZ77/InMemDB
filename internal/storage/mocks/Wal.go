// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	parser "github.com/DaniilZ77/InMemDB/internal/compute/parser"
	mock "github.com/stretchr/testify/mock"
)

// Wal is an autogenerated mock type for the Wal type
type Wal struct {
	mock.Mock
}

type Wal_Expecter struct {
	mock *mock.Mock
}

func (_m *Wal) EXPECT() *Wal_Expecter {
	return &Wal_Expecter{mock: &_m.Mock}
}

// Recover provides a mock function with no fields
func (_m *Wal) Recover() ([]parser.Command, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Recover")
	}

	var r0 []parser.Command
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]parser.Command, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []parser.Command); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]parser.Command)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Wal_Recover_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Recover'
type Wal_Recover_Call struct {
	*mock.Call
}

// Recover is a helper method to define mock.On call
func (_e *Wal_Expecter) Recover() *Wal_Recover_Call {
	return &Wal_Recover_Call{Call: _e.mock.On("Recover")}
}

func (_c *Wal_Recover_Call) Run(run func()) *Wal_Recover_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Wal_Recover_Call) Return(_a0 []parser.Command, _a1 error) *Wal_Recover_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Wal_Recover_Call) RunAndReturn(run func() ([]parser.Command, error)) *Wal_Recover_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: command
func (_m *Wal) Save(command *parser.Command) bool {
	ret := _m.Called(command)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(*parser.Command) bool); ok {
		r0 = rf(command)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Wal_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type Wal_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - command *parser.Command
func (_e *Wal_Expecter) Save(command interface{}) *Wal_Save_Call {
	return &Wal_Save_Call{Call: _e.mock.On("Save", command)}
}

func (_c *Wal_Save_Call) Run(run func(command *parser.Command)) *Wal_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*parser.Command))
	})
	return _c
}

func (_c *Wal_Save_Call) Return(_a0 bool) *Wal_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Wal_Save_Call) RunAndReturn(run func(*parser.Command) bool) *Wal_Save_Call {
	_c.Call.Return(run)
	return _c
}

// NewWal creates a new instance of Wal. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWal(t interface {
	mock.TestingT
	Cleanup(func())
}) *Wal {
	mock := &Wal{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
