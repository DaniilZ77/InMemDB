// Code generated by mockery v2.53.3. DO NOT EDIT.

package storage

import (
	mvcc "github.com/DaniilZ77/InMemDB/internal/storage/mvcc"
	mock "github.com/stretchr/testify/mock"
)

// MockCoordinator is an autogenerated mock type for the Coordinator type
type MockCoordinator struct {
	mock.Mock
}

type MockCoordinator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCoordinator) EXPECT() *MockCoordinator_Expecter {
	return &MockCoordinator_Expecter{mock: &_m.Mock}
}

// BeginTransaction provides a mock function with no fields
func (_m *MockCoordinator) BeginTransaction() *mvcc.Transaction {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for BeginTransaction")
	}

	var r0 *mvcc.Transaction
	if rf, ok := ret.Get(0).(func() *mvcc.Transaction); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mvcc.Transaction)
		}
	}

	return r0
}

// MockCoordinator_BeginTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BeginTransaction'
type MockCoordinator_BeginTransaction_Call struct {
	*mock.Call
}

// BeginTransaction is a helper method to define mock.On call
func (_e *MockCoordinator_Expecter) BeginTransaction() *MockCoordinator_BeginTransaction_Call {
	return &MockCoordinator_BeginTransaction_Call{Call: _e.mock.On("BeginTransaction")}
}

func (_c *MockCoordinator_BeginTransaction_Call) Run(run func()) *MockCoordinator_BeginTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCoordinator_BeginTransaction_Call) Return(_a0 *mvcc.Transaction) *MockCoordinator_BeginTransaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCoordinator_BeginTransaction_Call) RunAndReturn(run func() *mvcc.Transaction) *MockCoordinator_BeginTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// Del provides a mock function with given fields: key
func (_m *MockCoordinator) Del(key string) error {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Del")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCoordinator_Del_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Del'
type MockCoordinator_Del_Call struct {
	*mock.Call
}

// Del is a helper method to define mock.On call
//   - key string
func (_e *MockCoordinator_Expecter) Del(key interface{}) *MockCoordinator_Del_Call {
	return &MockCoordinator_Del_Call{Call: _e.mock.On("Del", key)}
}

func (_c *MockCoordinator_Del_Call) Run(run func(key string)) *MockCoordinator_Del_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockCoordinator_Del_Call) Return(_a0 error) *MockCoordinator_Del_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCoordinator_Del_Call) RunAndReturn(run func(string) error) *MockCoordinator_Del_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: key
func (_m *MockCoordinator) Get(key string) (string, bool) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 string
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) (string, bool)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockCoordinator_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockCoordinator_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - key string
func (_e *MockCoordinator_Expecter) Get(key interface{}) *MockCoordinator_Get_Call {
	return &MockCoordinator_Get_Call{Call: _e.mock.On("Get", key)}
}

func (_c *MockCoordinator_Get_Call) Run(run func(key string)) *MockCoordinator_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockCoordinator_Get_Call) Return(_a0 string, _a1 bool) *MockCoordinator_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCoordinator_Get_Call) RunAndReturn(run func(string) (string, bool)) *MockCoordinator_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function with given fields: key, value
func (_m *MockCoordinator) Set(key string, value string) error {
	ret := _m.Called(key, value)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(key, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCoordinator_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type MockCoordinator_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - key string
//   - value string
func (_e *MockCoordinator_Expecter) Set(key interface{}, value interface{}) *MockCoordinator_Set_Call {
	return &MockCoordinator_Set_Call{Call: _e.mock.On("Set", key, value)}
}

func (_c *MockCoordinator_Set_Call) Run(run func(key string, value string)) *MockCoordinator_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockCoordinator_Set_Call) Return(_a0 error) *MockCoordinator_Set_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCoordinator_Set_Call) RunAndReturn(run func(string, string) error) *MockCoordinator_Set_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCoordinator creates a new instance of MockCoordinator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCoordinator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCoordinator {
	mock := &MockCoordinator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
